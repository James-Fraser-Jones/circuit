REMEMBER TO SET "LINE HEIGHT" IN SETTINGS BACK TO 0 (FROM 17) AFTER THIS EXPERIMENT

A Box: 1x1 (6x3)
┌────┐
│    │
└────┘

Four Connected Boxes:
┌────┬────┐
│    │    │
├────┼────┤
│    │    │
└────┴────┘

Double Lines:
╔════╗
║    ║
╚════╝
╔════╦════╗
║    ║    ║
╠════╬════╣
║    ║    ║
╚════╩════╝

Arrows:
─────>
>─────
>────>

Into and out of boxes:
  ┌────┐
>─│────│─>
  └────┘

Dots:
● • ⬤ ■ █ ██

===========================================================================

f(x x):

f ────────────────────────┐
x ────────┬───────┐       │
      ┌───┼───────┼──┐    │
      │ ┌─┼──┐    │  │    │
      │ │ ██ ├──> ██ ├──> ██
      │ └────┘       │      
      └──────────────┘      

===========================================================================

Abstraction: ╔ ═ ╗ > ─ ╫ ║ ╚ ╝        ╪
  ╔════╗
>─╫─   ║
  ║ TT ║
  ╚════╝ 

With unused variable:
  ╔════╗
>─╫─●  ║
  ║ TT ║
  ╚════╝ 

Application: ┌ ─ ┐ │ ├ ─ > └ ┘      ┼ ┬
┌────┐
│ TT ├──> UU
└────┘
┏━━━━┓
┃ TT ┠──> UU
┗━━━━┛

(Bound) Variable: ─ ┐ █
TT───┐
     ██

(Free) Variable: ?
??

===========================================================================

λf.(λx.f(x x)) (λx.f(x x))

  ╔════╗
>─╫─   ║
  ║ TT ║
  ╚════╝ 

  ╔══════════════╗
>─╫─             ║
  ║ ┌────┐       ║
  ║ │ TT ├──> UU ║
  ║ └────┘       ║
  ╚══════════════╝ 

  ╔══════════════════════════╗
>─╫─                         ║
  ║ ┌──────────┐             ║
  ║ │   ╔════╗ │      ╔════╗ ║
  ║ │ >─╫─   ║ ├──> >─╫─   ║ ║
  ║ │   ║ TT ║ │      ║ TT ║ ║
  ║ │   ╚════╝ │      ╚════╝ ║
  ║ └──────────┘             ║
  ╚══════════════════════════╝ 

  ╔═══════════════════════════════════════════════════════════════════╗
>─╫─                                                                  ║
  ║ ┌──────────────────────────────┐                                  ║
  ║ │   ╔════════════════════════╗ │      ╔═════════════════════════╗ ║
  ║ │ >─╫─                       ║ ├──> >─╫─                        ║ ║
  ║ │   ║ ┌──────────────┐       ║ │      ║ ┌──────────────┐        ║ ║
  ║ │   ║ │ ┌────┐       │       ║ │      ║ │ ┌────┐       │        ║ ║
  ║ │   ║ │ │ ██ ├──> ██ ├──> ██ ║ │      ║ │ │ ██ ├──> ██ ├──> ██  ║ ║
  ║ │   ║ │ └────┘       │       ║ │      ║ │ └────┘       │        ║ ║
  ║ │   ║ └──────────────┘       ║ │      ║ └──────────────┘        ║ ║ 
  ║ │   ╚════════════════════════╝ │      ╚═════════════════════════╝ ║
  ║ └──────────────────────────────┘                                  ║
  ╚═══════════════════════════════════════════════════════════════════╝ 

  ╔═══════════════════════════════════════════════════════════════════╗
>─╫───────────────────────────┬─────────────────────────────────┐     ║
  ║ ┌─────────────────────────┼────┐                            │     ║
  ║ │   ╔═════════════════════╪══╗ │      ╔═════════════════════╪═══╗ ║
  ║ │ >─╫─────┬───────┐       │  ║ ├──> >─╫─────┬───────┐       │   ║ ║
  ║ │   ║ ┌───┼───────┼──┐    │  ║ │      ║ ┌───┼───────┼──┐    │   ║ ║
  ║ │   ║ │ ┌─┼──┐    │  │    │  ║ │      ║ │ ┌─┼──┐    │  │    │   ║ ║
  ║ │   ║ │ │ ██ ├──> ██ ├──> ██ ║ │      ║ │ │ ██ ├──> ██ ├──> ██  ║ ║
  ║ │   ║ │ └────┘       │       ║ │      ║ │ └────┘       │        ║ ║
  ║ │   ║ └──────────────┘       ║ │      ║ └──────────────┘        ║ ║ 
  ║ │   ╚════════════════════════╝ │      ╚═════════════════════════╝ ║
  ║ └──────────────────────────────┘                                  ║
  ╚═══════════════════════════════════════════════════════════════════╝

  ╔══════════════════════════════════════════════════════════════════╗
>─╫───────────────────────────┬─────────────────────────────────┐    ║
  ║ ┏━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━┓      ╔═════════════════════╪══╗ ║
  ║ ┃   ╔═════════════════════╪══╗ ┠──> >─╫─────┬───────┐       │  ║ ║
  ║ ┃ >─╫─────┬───────┐       │  ║ ┃      ║ ┏━━━┿━━━━━━━┿━━┓    │  ║ ║
  ║ ┃   ║ ┏━━━┿━━━━━━━┿━━┓    │  ║ ┃      ║ ┃ ┏━┿━━┓    │  ┃    │  ║ ║
  ║ ┃   ║ ┃ ┏━┿━━┓    │  ┃    │  ║ ┃      ║ ┃ ┃ ██ ┠──> ██ ┠──> ██ ║ ║
  ║ ┃   ║ ┃ ┃ ██ ┠──> ██ ┠──> ██ ║ ┃      ║ ┃ ┗━━━━┛       ┃       ║ ║
  ║ ┃   ║ ┃ ┗━━━━┛       ┃       ║ ┃      ║ ┗━━━━━━━━━━━━━━┛       ║ ║
  ║ ┃   ║ ┗━━━━━━━━━━━━━━┛       ║ ┃      ╚════════════════════════╝ ║ 
  ║ ┃   ╚════════════════════════╝ ┃                                 ║
  ║ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛                                 ║
  ╚══════════════════════════════════════════════════════════════════╝

  ╔════════════════════════════════════════════════════════════════════════╗
  ║ ┌─────────────────────────────┬───────────────────────────────────┐    ║
  ║ │ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━┓                              │    ║
  ║ │ ┃   ╔═══════════════════════╪══╗ ┃      ╔═══════════════════════╪══╗ ║
  ║ │ ┃   ║ ┌─────┬───────┐       │  ║ ┃      ║ ┌─────┬───────┐       │  ║ ║
  ║ │ ┃   ║ │ ┏━━━┿━━━━━━━┿━━┓    │  ║ ┃      ║ │ ┏━━━┿━━━━━━━┿━━┓    │  ║ ║
>─╫─┘ ┃ >─╫─┘ ┃ ┏━┿━━┓    │  ┃    │  ║ ┠──> >─╫─┘ ┃ ┏━┿━━┓    │  ┃    │  ║ ║
  ║   ┃   ║   ┃ ┃ ██ ┠──> ██ ┠──> ██ ║ ┃      ║   ┃ ┃ ██ ┠──> ██ ┠──> ██ ║ ║
  ║   ┃   ║   ┃ ┗━━━━┛       ┃       ║ ┃      ║   ┃ ┗━━━━┛       ┃       ║ ║
  ║   ┃   ║   ┗━━━━━━━━━━━━━━┛       ║ ┃      ║   ┗━━━━━━━━━━━━━━┛       ║ ║
  ║   ┃   ╚══════════════════════════╝ ┃      ╚══════════════════════════╝ ║
  ║   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛                                   ║
  ╚════════════════════════════════════════════════════════════════════════╝

┏━┿━━┓    │ 
┃ ██ ┠──> ██
┗━━━━┛      
Application:
Pad left arg left and right 1 (with child protection)
Box left arg bold (with child protection)
Arrow left arg
Pad left or right args top and bottom to vertically align them (with child protection)
Append left and right args with 1 middle padding

  ╔══════╗
>─╫───┐  ║
  ║   ██ ║
  ╚══════╝

  ╔═════╪════╗
  ║ ┌─┬─┼─┐  ║
>─╫─┘ ██████ ║
  ║   ██████ ║
  ╚══════════╝

  0123456789
 |----------|
0| ┌─┬─┼─┐  |
1|─┘ ██████ |
2|   ██████ |
 |----------|

  ╔═══════╪══╗
  ║ ┌─┬─┐ │  ║
  ║ │ ██████ ║
>─╫─┘ ██████ ║
  ║   ██████ ║
  ║   ██████ ║
  ╚══════════╝

Abstraction:
Pad arg 1 0 3 1 (up down left right) (with child protection)
Box arg double
Arrow arg (with dynamic curvature based on height of arg, minimum 2)

We need:

Generic padding function 
"pad :: Int -> Int -> Int -> Int -> Circuit -> Circuit"
Generic boxing function
"box :: BoxStyle -> Circuit -> Circuit"
Appending function
"append :: Int -> Circuit -> Circuit"
Aligning function
"align :: Circuit -> Circuit -> (Circuit, Circuit)"

Apping function
"apper :: Circuit -> Circuit"
Laming function
"lamer :: Circuit -> Circuit"

Notes: 
Arrow on application box is as close to the center as possible while ensuring that it lines up with input arrow
Applied things of different sizes want to be vertically centered
Basically going to need to have functions for wrapping objects of different sizes in these 2 fundamental operations
Then variables can be connected up correctly afterwards
One space between lambda application connections i.e. "...-> >-..." and those connections should always line up correctly

With application:
Vertically align both objects.
Smaller object can move itself and/or its output arrow (if it's on the left) to align with input arrow.

For now, simply top align both terms in the application A B and don't bother moving the arrow location on the input box